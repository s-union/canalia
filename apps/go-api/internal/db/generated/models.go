// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"time"

	"github.com/sqlc-dev/pqtype"
)

type CampusType string

const (
	CampusTypeValue0 CampusType = "野田"
	CampusTypeValue1 CampusType = "葛飾"
	CampusTypeValue2 CampusType = "神楽坂"
	CampusTypeValue3 CampusType = "３キャンパス合同"
)

func (e *CampusType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CampusType(s)
	case string:
		*e = CampusType(s)
	default:
		return fmt.Errorf("unsupported scan type for CampusType: %T", src)
	}
	return nil
}

type NullCampusType struct {
	CampusType CampusType `json:"campus_type"`
	Valid      bool       `json:"valid"` // Valid is true if CampusType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCampusType) Scan(value interface{}) error {
	if value == nil {
		ns.CampusType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CampusType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCampusType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CampusType), nil
}

func (e CampusType) Valid() bool {
	switch e {
	case CampusTypeValue0,
		CampusTypeValue1,
		CampusTypeValue2,
		CampusTypeValue3:
		return true
	}
	return false
}

func AllCampusTypeValues() []CampusType {
	return []CampusType{
		CampusTypeValue0,
		CampusTypeValue1,
		CampusTypeValue2,
		CampusTypeValue3,
	}
}

type CategoryType string

const (
	CategoryTypeValue0 CategoryType = "運動系"
	CategoryTypeValue1 CategoryType = "演技系"
	CategoryTypeValue2 CategoryType = "音楽系"
	CategoryTypeValue3 CategoryType = "文化系"
)

func (e *CategoryType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CategoryType(s)
	case string:
		*e = CategoryType(s)
	default:
		return fmt.Errorf("unsupported scan type for CategoryType: %T", src)
	}
	return nil
}

type NullCategoryType struct {
	CategoryType CategoryType `json:"category_type"`
	Valid        bool         `json:"valid"` // Valid is true if CategoryType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCategoryType) Scan(value interface{}) error {
	if value == nil {
		ns.CategoryType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CategoryType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCategoryType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CategoryType), nil
}

func (e CategoryType) Valid() bool {
	switch e {
	case CategoryTypeValue0,
		CategoryTypeValue1,
		CategoryTypeValue2,
		CategoryTypeValue3:
		return true
	}
	return false
}

func AllCategoryTypeValues() []CategoryType {
	return []CategoryType{
		CategoryTypeValue0,
		CategoryTypeValue1,
		CategoryTypeValue2,
		CategoryTypeValue3,
	}
}

type PlaceType string

const (
	PlaceTypeValue0 PlaceType = "屋外"
	PlaceTypeValue1 PlaceType = "屋内"
	PlaceTypeValue2 PlaceType = "特殊"
)

func (e *PlaceType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PlaceType(s)
	case string:
		*e = PlaceType(s)
	default:
		return fmt.Errorf("unsupported scan type for PlaceType: %T", src)
	}
	return nil
}

type NullPlaceType struct {
	PlaceType PlaceType `json:"place_type"`
	Valid     bool      `json:"valid"` // Valid is true if PlaceType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPlaceType) Scan(value interface{}) error {
	if value == nil {
		ns.PlaceType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PlaceType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPlaceType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PlaceType), nil
}

func (e PlaceType) Valid() bool {
	switch e {
	case PlaceTypeValue0,
		PlaceTypeValue1,
		PlaceTypeValue2:
		return true
	}
	return false
}

func AllPlaceTypeValues() []PlaceType {
	return []PlaceType{
		PlaceTypeValue0,
		PlaceTypeValue1,
		PlaceTypeValue2,
	}
}

type AnsweredForms struct {
	ID          int32       `json:"id"`
	FormID      int32       `json:"form_id"`
	UserID      int32       `json:"user_id"`
	CircleID    int32       `json:"circle_id"`
	Status      string      `json:"status"`
	SubmittedAt **time.Time `json:"submitted_at"`
	CreatedAt   time.Time   `json:"created_at"`
	UpdatedAt   time.Time   `json:"updated_at"`
}

type Answers struct {
	ID             int32           `json:"id"`
	AnsweredFormID int32           `json:"answered_form_id"`
	QuestionID     int32           `json:"question_id"`
	Answer         json.RawMessage `json:"answer"`
	CreatedAt      time.Time       `json:"created_at"`
	UpdatedAt      time.Time       `json:"updated_at"`
}

type Circles struct {
	ID           int32          `json:"id"`
	Name         string         `json:"name"`
	Description  sql.NullString `json:"description"`
	ContactEmail sql.NullString `json:"contact_email"`
	WebsiteUrl   sql.NullString `json:"website_url"`
	TwitterUrl   sql.NullString `json:"twitter_url"`
	InstagramUrl sql.NullString `json:"instagram_url"`
	YoutubeUrl   sql.NullString `json:"youtube_url"`
	Campus       CampusType     `json:"campus"`
	Category     CategoryType   `json:"category"`
	CreatedAt    time.Time      `json:"created_at"`
	UpdatedAt    time.Time      `json:"updated_at"`
}

type ContactEmails struct {
	ID          int32          `json:"id"`
	Name        string         `json:"name"`
	Email       string         `json:"email"`
	PhoneNumber sql.NullString `json:"phone_number"`
}

type EventGenres struct {
	ID               int32     `json:"id"`
	Name             string    `json:"name"`
	StartApplication time.Time `json:"start_application"`
	EndApplication   time.Time `json:"end_application"`
}

type EventTagRelations struct {
	ID         int32 `json:"id"`
	EventID    int32 `json:"event_id"`
	EventTagID int32 `json:"event_tag_id"`
}

type EventTags struct {
	ID          int32          `json:"id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
}

type Events struct {
	ID           int32     `json:"id"`
	EventGenreID int32     `json:"event_genre_id"`
	CircleID     int32     `json:"circle_id"`
	PlaceID      int32     `json:"place_id"`
	Name         string    `json:"name"`
	CreatedAt    time.Time `json:"created_at"`
	UpdatedAt    time.Time `json:"updated_at"`
}

type FileNews struct {
	ID          int32          `json:"id"`
	Title       string         `json:"title"`
	Summary     sql.NullString `json:"summary"`
	FilePath    string         `json:"file_path"`
	IsPublished bool           `json:"is_published"`
	CreatedAt   time.Time      `json:"created_at"`
	UpdatedAt   time.Time      `json:"updated_at"`
}

type FormTags struct {
	ID         int32 `json:"id"`
	FormID     int32 `json:"form_id"`
	EventTagID int32 `json:"event_tag_id"`
}

type Forms struct {
	ID                 int32          `json:"id"`
	Title              string         `json:"title"`
	Summary            sql.NullString `json:"summary"`
	IsPublished        bool           `json:"is_published"`
	StartTime          time.Time      `json:"start_time"`
	EndTime            time.Time      `json:"end_time"`
	CommitteeStartTime time.Time      `json:"committee_start_time"`
	CommitteeEndTime   time.Time      `json:"committee_end_time"`
	CreatedAt          time.Time      `json:"created_at"`
	UpdatedAt          time.Time      `json:"updated_at"`
}

type Leaders struct {
	ID       int32 `json:"id"`
	UserID   int32 `json:"user_id"`
	CircleID int32 `json:"circle_id"`
	Priority int32 `json:"priority"`
}

type Permissions struct {
	ID          int32          `json:"id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
}

type Places struct {
	ID          int32          `json:"id"`
	Name        string         `json:"name"`
	Type        PlaceType      `json:"type"`
	Description sql.NullString `json:"description"`
}

type QaAnswers struct {
	ID             int32     `json:"id"`
	ContactEmailID int32     `json:"contact_email_id"`
	UserID         int32     `json:"user_id"`
	Title          string    `json:"title"`
	Contents       string    `json:"contents"`
	Status         string    `json:"status"`
	CreatedAt      time.Time `json:"created_at"`
	UpdatedAt      time.Time `json:"updated_at"`
}

type QuestionOptions struct {
	ID         int32  `json:"id"`
	QuestionID int32  `json:"question_id"`
	Order      int32  `json:"order"`
	Value      string `json:"value"`
	Label      string `json:"label"`
}

type Questions struct {
	ID              int32                 `json:"id"`
	FormID          int32                 `json:"form_id"`
	Order           int32                 `json:"order"`
	Title           string                `json:"title"`
	Description     sql.NullString        `json:"description"`
	Type            string                `json:"type"`
	IsRequired      bool                  `json:"is_required"`
	ValidationRules pqtype.NullRawMessage `json:"validation_rules"`
	CreatedAt       time.Time             `json:"created_at"`
	UpdatedAt       time.Time             `json:"updated_at"`
}

type TextNews struct {
	ID          int32          `json:"id"`
	Title       string         `json:"title"`
	Summary     sql.NullString `json:"summary"`
	Contents    string         `json:"contents"`
	IsPublished bool           `json:"is_published"`
	CreatedAt   time.Time      `json:"created_at"`
	UpdatedAt   time.Time      `json:"updated_at"`
}

type UserPermissions struct {
	ID           int32 `json:"id"`
	UserID       int32 `json:"user_id"`
	PermissionID int32 `json:"permission_id"`
}

type Users struct {
	ID           int32          `json:"id"`
	Email        string         `json:"email"`
	ContactEmail sql.NullString `json:"contact_email"`
	IsVerified   bool           `json:"is_verified"`
	PhoneNumber  sql.NullString `json:"phone_number"`
	FamilyName   string         `json:"family_name"`
	GivenName    string         `json:"given_name"`
	IsActive     bool           `json:"is_active"`
	CreatedAt    time.Time      `json:"created_at"`
	UpdatedAt    time.Time      `json:"updated_at"`
}
