// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package db

import (
	"context"
	"database/sql"
)

const CheckUserExists = `-- name: CheckUserExists :one
SELECT EXISTS(SELECT 1 FROM users WHERE email = $1 AND is_active = true)
`

func (q *Queries) CheckUserExists(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRowContext(ctx, CheckUserExists, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const CreateUser = `-- name: CreateUser :one
INSERT INTO users (email, contact_email, phone_number, family_name, given_name, is_verified, is_active)
VALUES ($1, $2, $3, $4, $5, false, true)
RETURNING id, email, contact_email, is_verified, phone_number, family_name, given_name, is_active, created_at, updated_at
`

type CreateUserParams struct {
	Email        string         `json:"email"`
	ContactEmail sql.NullString `json:"contact_email"`
	PhoneNumber  sql.NullString `json:"phone_number"`
	FamilyName   string         `json:"family_name"`
	GivenName    string         `json:"given_name"`
}

func (q *Queries) CreateUser(ctx context.Context, arg *CreateUserParams) (*Users, error) {
	row := q.db.QueryRowContext(ctx, CreateUser,
		arg.Email,
		arg.ContactEmail,
		arg.PhoneNumber,
		arg.FamilyName,
		arg.GivenName,
	)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.ContactEmail,
		&i.IsVerified,
		&i.PhoneNumber,
		&i.FamilyName,
		&i.GivenName,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const GetUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, contact_email, is_verified, phone_number, family_name, given_name, is_active, created_at, updated_at
FROM users
WHERE email = $1 AND is_active = true
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (*Users, error) {
	row := q.db.QueryRowContext(ctx, GetUserByEmail, email)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.ContactEmail,
		&i.IsVerified,
		&i.PhoneNumber,
		&i.FamilyName,
		&i.GivenName,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const UpdateUser = `-- name: UpdateUser :one
UPDATE users 
SET contact_email = $2, phone_number = $3, family_name = $4, given_name = $5, updated_at = NOW()
WHERE email = $1 AND is_active = true
RETURNING id, email, contact_email, is_verified, phone_number, family_name, given_name, is_active, created_at, updated_at
`

type UpdateUserParams struct {
	Email        string         `json:"email"`
	ContactEmail sql.NullString `json:"contact_email"`
	PhoneNumber  sql.NullString `json:"phone_number"`
	FamilyName   string         `json:"family_name"`
	GivenName    string         `json:"given_name"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg *UpdateUserParams) (*Users, error) {
	row := q.db.QueryRowContext(ctx, UpdateUser,
		arg.Email,
		arg.ContactEmail,
		arg.PhoneNumber,
		arg.FamilyName,
		arg.GivenName,
	)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.ContactEmail,
		&i.IsVerified,
		&i.PhoneNumber,
		&i.FamilyName,
		&i.GivenName,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
